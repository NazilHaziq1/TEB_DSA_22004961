#include <iostream>
#include <vector>
#include <unordered_map>
#include <set>
#include <queue>
#include <algorithm>

using namespace std;


struct Edge {
    int u, v, weight;
};

bool compareEdges(Edge a, Edge b) {
    return a.weight < b.weight;
}

class DisjointSet {
public:
    vector<int> parent;

    DisjointSet(int n) {
        parent.resize(n);
        for(int i = 0; i < n; ++i)
            parent[i] = i;
    }

    int find(int x) {
        if(parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    void unite(int a, int b) {
        int rootA = find(a);
        int rootB = find(b);
        if(rootA != rootB)
            parent[rootA] = rootB;
    }
};

void kruskalMST(int vertices, vector<Edge>& edges) {
    sort(edges.begin(), edges.end(), compareEdges);

    DisjointSet ds(vertices);
    vector<Edge> mst;

    for (Edge e : edges) {
        if (ds.find(e.u) != ds.find(e.v)) {
            mst.push_back(e);
            ds.unite(e.u, e.v);
        }
    }

    cout << "\nMinimum Spanning Tree Edges:\n";
    int total = 0;
    for (Edge e : mst) {
        cout << e.u << " - " << e.v << " : " << e.weight << endl;
        total += e.weight;
    }
    cout << "Total weight of MST: " << total << endl;
}

// ---------------------- MAIN ------------------------

int main() {
    int V = 5;
    Graph g(V);

    // Sample edges for Task 1
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(3, 4);
    g.addEdge(1, 2);

    cout << "Adjacency List:\n";
    g.displayAdjacencyList();

    // Path of length 3 from vertex 0 to 4
    int u = 0, v = 4, k = 3;
    cout << "\nIs there a path of length " << k << " from " << u << " to " << v << "? ";
    cout << (g.pathExistsOfLength(u, v, k) ? "Yes" : "No") << endl;

    // Sample edges for Task 2 (weighted)
    vector<Edge> edgeList = {
        {0, 1, 2},
        {0, 2, 3},
        {1, 3, 1},
        {3, 4, 4},
        {1, 2, 5}
    };

    kruskalMST(V, edgeList);

    return 0;
}
