#include <iostream>
#include <vector>
#include <unordered_map>
#include <set>
#include <queue>
#include <algorithm>

using namespace std;

// ---------------------- TASK 1 ------------------------

class Graph {
public:
    int vertices;
    unordered_map<int, vector<int>> adjList;

    Graph(int v) {
        vertices = v;
    }

    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u);  // undirected
    }

    void displayAdjacencyList() {
        for (auto pair : adjList) {
            cout << pair.first << ": ";
            for (int neighbor : pair.second)
                cout << neighbor << " ";
            cout << endl;
        }
    }

    bool dfsPathLength(int current, int target, int length, set<int> visited) {
        if (length < 0) return false;
        if (length == 0) return current == target;

        visited.insert(current);
        for (int neighbor : adjList[current]) {
            if (visited.find(neighbor) == visited.end()) {
                if (dfsPathLength(neighbor, target, length - 1, visited))
                    return true;
            }
        }
        return false;
    }

    bool pathExistsOfLength(int u, int v, int k) {
        set<int> visited;
        return dfsPathLength(u, v, k, visited);
    }
};
